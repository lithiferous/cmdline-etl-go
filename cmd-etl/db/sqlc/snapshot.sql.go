// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: snapshot.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const createSnapshot = `-- name: CreateSnapshot :one
INSERT INTO snapshots (
	user_name,
	store_name,
	credit_limit,
	snapshot_at
) VALUES (
  $1, $2, $3, $4
) RETURNING user_name, store_name, credit_limit, snapshot_at, created_at
`

type CreateSnapshotParams struct {
	UserName    string
	StoreName   string
	CreditLimit decimal.Decimal
	SnapshotAt  pgtype.Timestamp
}

func (q *Queries) CreateSnapshot(ctx context.Context, arg CreateSnapshotParams) (Snapshot, error) {
	row := q.db.QueryRow(ctx, createSnapshot,
		arg.UserName,
		arg.StoreName,
		arg.CreditLimit,
		arg.SnapshotAt,
	)
	var i Snapshot
	err := row.Scan(
		&i.UserName,
		&i.StoreName,
		&i.CreditLimit,
		&i.SnapshotAt,
		&i.CreatedAt,
	)
	return i, err
}

const listSnapshots = `-- name: ListSnapshots :many
SELECT user_name, store_name, credit_limit, snapshot_at, created_at FROM snapshots
ORDER BY snapshot_at DESC
`

func (q *Queries) ListSnapshots(ctx context.Context) ([]Snapshot, error) {
	rows, err := q.db.Query(ctx, listSnapshots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Snapshot
	for rows.Next() {
		var i Snapshot
		if err := rows.Scan(
			&i.UserName,
			&i.StoreName,
			&i.CreditLimit,
			&i.SnapshotAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
